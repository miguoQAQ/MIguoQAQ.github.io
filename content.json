[{"title":"OtterCTF 2018 取证系列 WP by MiguoQAQ","path":"2024/03/13/OtterCTF/","text":"[OtterCTF 2018] 取证系列# What the password? General Info Play Time Silly Rick Name Game Hide And Seek Name Game 2 Path To Glory Bit 4 Bit Graphic’s For The Weak Path To Glory 2 Recovery Closure 1vol.py -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; imageinfo What the password?# 1vol.py --plugin=/usr/lib/python2.7/dist-packages/volatility/plugins/ -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; --profile=Win7SP1x64 mimikatz MortyIsReallyAnOtter NSSCTF&#123;MortyIsReallyAnOtter&#125; General Info# 1vol.py -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; --profile=Win7SP1x64 hivelist 主机名会储存在\\REGISTRY\\MACHINE\\SYSTEM中的ControlSet001\\Control\\ComputerName\\ComputerName条目中 1vol.py -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; --profile=Win7SP1x64 -o 0xfffff8a000024010 printkey -K &quot;ControlSet001\\Control\\ComputerName\\ComputerName&quot; WIN-LO6FAF3DTFE 1vol.py -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; --profile=Win7SP1x64 netscan 192.168.202.131 NSSCTF&#123;WIN-LO6FAF3DTFE-192.168.202.131&#125; Play Time# 分析一下进程 1vol.py -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; --profile=Win7SP1x64 pslist 提示是old videogames，找到一个进程LunarMS.exe应该是一个日本古老游戏露娜 LunarMS 1vol.py -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; --profile=Win7SP1x64 netscan 找到这个游戏对应的ip：77.102.199.102 NSSCTF&#123;LunarMS-77.102.199.102&#125; Silly Rick#提示：He always copy and paste the password so he will not get it wrong. 总是复制粘贴，所以看看他的剪贴板 1vol.py -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; --profile=Win7SP1x64 clipboard M@il_Pr0vid0rs NSSCTF&#123;M@il_Pr0vid0rs&#125; Name Game# 之前看到过了那个游戏的进程，dump下来 1vol.py -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; --profile=Win7SP1x64 memdump -p 708 -D &#x27;/home/kali/Desktop/Game&#x27; 使用linux内置字符串查找 1strings &#x27;/home/kali/Desktop/Game/708.dmp&#x27; | grep &quot;Lunar-3&quot; -C 20 string使用参数：-C&lt;显示行数&gt; 或 --context=&lt;显示行数&gt;或-&lt;显示行数&gt; : 除了显示符合样式的那一行之外，并显示该行之前后的内容。 在其之后找到了一个可疑的字符串：0tt3r8r33z3 NSSCTF&#123;0tt3r8r33z3&#125; Hide And Seek# 查看进程树 1vol.py -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; --profile=Win7SP1x64 pstree vmware-tray.exe是Rick And Morty的子进程，十分可疑 同时检测和分析内存中的恶意软件特征也可以找到这个文件 1vol.py -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; --profile=Win7SP1x64 malfind NSSCTF&#123;vmware-tray.exe&#125; Name Game 2# 使用游戏进程dump下来的文件 0x64 0x??&#123;6-8&#125; 0x40 0x06 0x??&#123;18&#125; 0x5a 0x0c 0x00&#123;2&#125;，只需要找5A 0C 00 00并且前面对应的地方 扔进010搜索 M0rtyL0L NSSCTF&#123;M0rtyL0L&#125; Path To Glory# 刚刚进行检测和分析内存中的恶意软件特征时也看见了这个文件 这是一个种子传输的程序，猜测古老获取病毒的方式是种子传输 找到这个恶意文件的父进程的下载路径 把这几个文件都dump下来看看 再寻找一下可疑信息 一个可疑的字符串：M3an_T0rren7_4_R!cke NSSCTF&#123;M3an_T0rren7_4_R!ck&#125; 注意！提交flag的时候没有最后面的e！ Bit 4 Bit# 把那个可疑进程dump出来 1vol.py -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; --profile=Win7SP1x64 pslist 1vol.py -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; --profile=Win7SP1x64 procdump -p 3720 -D &#x27;/home/kali/Desktop/Game&#x27; 看看文件成分 这个病毒是.NET写的 使用dnSpy打开 在隐藏资源的Form3找到了地址 1MmpEmebJkqXG8nQv4cjJSmxZQFVmFo63M NSSCTF&#123;1MmpEmebJkqXG8nQv4cjJSmxZQFVmFo63M&#125; Graphic’s For The Weak# 图片有点可疑，打开之前dump下来的文件 在里面发现了疑似png文件的格式 直接binwalk解了 CTF&#123;S0_Just_M0v3_Socy&#125; NSSCTF&#123;S0_Just_M0v3_Socy&#125; Path To Glory 2# 刚刚那个病毒是通过种子下载的，加之之前看到了很多chrome进程，所以从chrome记录入手 1vol.py -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; --profile=Win7SP1x64 filescan |grep -i &quot;chrome.*history*&quot; 把得到的信息dump下来 1vol.py -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; --profile=Win7SP1x64 dumpfiles -Q 0x000000007d45dcc0 -D &#x27;/home/kali/Desktop/Game&#x27; 这是一个数据库文件 种子是在mail.com里面下载的，所以过滤相关信息 1trings /home/kali/Desktop/OtterCTF.vmem &gt; /home/kali/Desktop/OtterCTF.vmem.strings 1grep &quot;@mail.com&quot; &#x27;/home/kali/Desktop/OtterCTF.vmem.strings&#x27; 这个看起来像是邮箱地址，附近应该还有东西，过滤的范围应该更大一些 1grep -A 20 &quot;&lt;rickopicko@mail.com&gt;&quot; &#x27;/home/kali/Desktop/OtterCTF.vmem.strings&#x27; 这就是flag*（这谁找得到啊）* Hum@n_I5_Th3_Weak3s7_Link_In_Th3_Ch@in NSSCTF&#123;Hum@n_I5_Th3_Weak3s7_Link_In_Th3_Ch@in&#125; Recovery# 找出密码是什么，依然用dnSpy打开勒索病毒查看伪代码 密码组成有一部分为“主机名”+“-”+“用户名”+“ ” 之前得到的主机名WIN-LO6FAF3DTFE 查看用户名 1vol.py -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; --profile=Win7SP1x64 hashdump Rick 得知密码一部分为 WIN-LO6FAF3DTFE-Rick 筛选 1strings -e l &#x27;/home/kali/Desktop/Game/3720.dmp&#x27; | grep &quot;WIN-LO6FAF3DTFE-Rick&quot; 密码为：WIN-LO6FAF3DTFE-Rick aDOBofVYUNVnmp7 NSSCTF&#123;aDOBofVYUNVnmp7&#125; Closure# 被加密的应该就是flag文件了，让我们找找看它在哪里 1vol.py -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; --profile=Win7SP1x64 filescan | grep -i &quot;flag&quot; 把它dump下来 1vol.py -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; --profile=Win7SP1x64 dumpfiles -Q 0x000000007e410890 --dump-dir=&#x27;/home/kali/Desktop/Game&#x27; 把它改个名字 网上找到这个勒索病毒Hidden Tear 在网上可以找到解密程序HiddenTearDecrypter 在解密之前，需要移除文件后所有的十六进制 00，并修改文件的后缀为 .locked，放入一个文件夹里面 解密得到了原文件 修改后缀名 得到了flag！ NSSCTF&#123;Im_Th@_B3S7_RicK_0f_Th3m_4ll&#125;"},{"title":"pearlCTF [Forensics]SoundScape WP by MiguoQAQ","path":"2024/03/10/pearlCTF [Forensics]SoundScape WP by MiguoQAQ/","text":"SoundScape# 第四个是我所在的队伍！我是第四个做出来的！耶！ 👇以下为WriteUp👇 给了三个音频，说音频就是图片，看看音频们 全都是这样的格式，肯定是高低对应10没错了，而且数量如此之多，猜测是文件的二进制值 但为什么有三个这样的文件呢？ 文件的名字经过搜索并没有什么特别的，但是大写的首字母是RGB，思路变得清晰起来了！ 接下来就是拿到数据和脚本运算了 打开010看看能不能从文件格式内得到信息 经过比较Audacity内的信息，发现wav文件并没有被压缩破坏，还是很有灵性的~导出16进制，把7F改成1，把00改成0就可以得到二进制了，其他两个文件同理。 因为得到的01二进制数据有1769472位，每8位转换成一个2位的16进制数，所以得到的数据对应的有221184个，分离因数可以猜出图片大小 接下来就是写脚本环节！ 12345678910111213141516171819202122232425262728293031323334353637383940414243import numpy as npimport matplotlib.pyplot as pltdef convert_binary_to_hex(binary_string): decimal_value = int(binary_string, 2) hex_string = format(decimal_value, &#x27;02X&#x27;) return hex_stringdef main(): with open(&#x27;Raine1.txt&#x27;, &#x27;r&#x27;) as file1, open(&#x27;Gideon1.txt&#x27;, &#x27;r&#x27;) as file2, open(&#x27;Beryl1.txt&#x27;, &#x27;r&#x27;) as file3: binary1 = file1.read() binary2 = file2.read() binary3 = file3.read() hex_colors = [] for i in range(0, len(binary1), 8): r = convert_binary_to_hex(binary1[i:i+8]) g = convert_binary_to_hex(binary2[i:i+8]) b = convert_binary_to_hex(binary3[i:i+8]) hex_colors.append((r+g+b)) #print(hex_colors) #这里可以打印出来一些RGB像素数据来判断进制转换是否正确 # 将16进制颜色转换为RGB格式 rgb_colors = [tuple(int(hex[i:i + 2], 16) for i in (0, 2, 4)) for hex in hex_colors] # 创建一个数组以存储像素值 image_array = np.array([rgb_colors], dtype=np.uint8) # 调整数组形状以匹配图像尺寸 #这里我发现的图片尺寸是384*576 image_array = image_array.reshape(384, 576, 3) # 绘制图像 plt.imshow(image_array) plt.axis(&#x27;off&#x27;) # 保存图像为文件 plt.savefig(&#x27;output_image.png&#x27;)if __name__ == &quot;__main__&quot;: main() 运行一下，就可以得到图片力"},{"title":"Forensics 学习 No.1","path":"2024/02/06/No-1/","text":"Forensics学习No.1-内存取证工具volatility# volatility安装，环境配置及其插件安装 volatility安装 volatility插件安装 官方帮助 命令格式 常用命令- 查看镜像文件系统摘要信息： 用户相关 查看用户名和密码（hash值） 从注册表中查看密码： 使用mimikatz插件查看密码（需要进入插件目录） cmd相关 查看cmd使用情况 查看cmd详细情况 抓取控制台下执行的命令以及回显数据 进程相关 扫描内存中的进程 列举全部进程 查看进程结构图 查看隐藏进程 找出隐藏在内存中的dll文件和代码 列出每个进程已加载的dll 将进程程序提取出来 显示内存中多种事件的时间线 显示进程的环境变量 显示进程的运行权限 导出当前进程的可执行文件 最大程序提取信息 程序版本信息 通过yarascan来定义YARA规则进行搜索 文件相关 扫描文件 提取文件 抓取删除的文件 扫描内存中潜在的主引导记录 扫描在内存中潜在NTFS主文件表记录(MFT) 检测和分析内存中的恶意软件特征 从内存文件中找到异常程序植入到系统的开机自启痕迹 注册表相关 打印 userassist 注册表项和信息，查看运行程序相关记录 查看注册表蜂巢文件，显示内存中的注册表配置单元和对应的路径 可以对蜂巢根目录进行dump，查看注册表键名子项 查看注册表键值 导出shellbags注册表项 将内存中的注册表配置单元导出至磁盘 网络相关 扫描全部网络连接 检索已建立的网络连接状态，显示活跃的TCP连接（&#x2F;win7sp1x64不可用） 查看网络连接状态，显示所有的TCP连接（&#x2F;win7sp1x64不可用） 显示所有的套接字连接（&#x2F;win7sp1x64不可用） 扫描标签池查找_ADDRESS_OBJECT结构体（&#x2F;win7sp1x64不可用） windows系统相关 查看桌面截图并存储（只有线框图和标题） 查看notepad文件（只能查看进程中的notepad.exe中的内容） 查看内存中Windows剪切板中的内容 打印系统所有桌面窗口的信息 以树状形式打印系统所有的窗口简略信息 查看编辑控件信息 查看ie浏览器历史浏览记录 扫描windows的服务 查看环境变量 内存映像交互访问命令行工具 linux相关 查看linux_bash命令 分析Linux系统中的进程和进程环境 查看linux系统的dmesg缓冲区中日志消息 检查Linux系统调用表是否被修改过 volatility安装，环境配置及其插件安装#volatility安装#1234参考文档：https://cloud.tencent.com/developer/article/2375403https://blog.csdn.net/weixin_44895005/article/details/123917324https://bbs.huaweicloud.com/blogs/399904 配置环境：kali linux2023 python环境：python2 安装源码：https://github.com/volatilityfoundation/volatility 针对python2 在安装之前，需要配置下本地的pip2环境，因为在kali2023里面，pip和pip3都是python3的，并没有给python2配置pip，所以需要自己单独安装下，不然后面配置的环境都跑到python3里面去了。 所以在这里单独配置pip2： 1curl https://bootstrap.pypa.io/pip/2.7/get-pip.py -o get-pip.py 安装： 1python2 setup.py install 安装完之后，使用pip2看下当前的版本信息： 然后准备安装volatility：去下载https://github.com/volatilityfoundation/volatility，然后进入volatility目录内直接安装： 1python2 setup.py install 继续安装必须的模块： crypto模块 1pip2 install pycryptodome -i https://pypi.tuna.tsinghua.edu.cn/simple 如果出现类似报错：Command errored out with exit status 1: python setup.py egg_info Check the logs for full command ， 那么需要升级一下pip2 1pip2 install --upgrade setuptools 然后再次进行安装即可。 distorm3模块 依赖： 1pip2 install pycryptodome 在这里需要先将模块下载下来：https://github.com/vext01/distorm3 将模块存入volatility目录内，然后进入distorm3目录内使用命令行安装： 1python2 setup.py install construct库 1pip2 install construct 此时基础的模块就算安装好了，可以在任意目录下输入vol.py 如果出现这个，就说明安装好了 volatility插件安装# 安装mimikatz插件 https://raw.githubusercontent.com/RealityNet/hotoloti/master/volatility/mimikatz.py 需要将这个文件移动到python2的volatility的插件目录下： 1234cd /usr/lib/python2.7/dist-packagesmkdir volatilitycd volatilitymkdir plugins 然后将这个文件复制过去： 1cp mimikatz.py /usr/lib/python2.7/dist-packages/volatility/plugins/ 最后对于文件赋予权限： 1chmod 777 * 现在可以尝试一下了，这里需要注意一下，一定要在保存的目录内使用--plugin=./参数调用插件（在其他地方调用会出现找不到插件的错误） 1vol.py --plugin=./ -f &#x27;/home/kali/Desktop/学取证咯.raw&#x27; --profile=Win7SP1x64 mimikatz 安装yara插件 一定要通过手动下载然后转移到kali内！！不要使用pip，apt-get等方式获取！ 下载yara：https://virustotal.github.io/yara/（下载4.2.3版本） 下载yara-python：https://github.com/VirusTotal/yara-python（下载4.2.3版本） （本人实验只有对应的4.2.3版本可以正常运行，版本过高会有不兼容问题，具体错误报告见https://github.com/volatilityfoundation/volatility/issues/869） 123参考文章（官方文档）：https://yara.readthedocs.io/en/v4.2.3/gettingstarted.htmlhttps://github.com/VirusTotal/yara-python/blob/master/README.rst 本文只摘取官方文档中部分基础内容，建议阅读官方文档进行安装 安装yara所需的模块&#x2F;库 123sudo apt-get install automake libtool make gcc pkg-configsudo apt-get install libjansson-devsudo apt install libmagic-dev 下载yara4.2.3压缩包后按照标准方式编译并安装YARA： 123456tar -zxf yara-4.2.3.tar.gzcd yara-4.2.3./bootstrap.sh./configuremakesudo make install 运行测试用例以确保一切正常： 1make check 这时可以通过运行 1yara --version 来测试yara 编译yara-python-4.2.3（解压缩到yara-4.2.3目录内，在yara-4.2.3目录内安装） 123tar -zxf yara-python-4.2.3.tar.gzcd yara-python-4.2.3python2 setup.py build 此时将yara-4.2.3文件夹内文件拷贝一份，复制到yara-python-4.2.3文件夹内的yara文件夹中，去除yara-python-4.2.3文件夹 这个时候安装yara-python-4.2.3 1sudo python2 setup.py install 如果您想动态链接共享libyara库，请使用： 1python2 setup.py build --dynamic-linking 这时可以使用 123python2import yaraprint(yara.__version__) 来测试yara-python 最后尝试使用volatility中的yarascan 1vol.py -f &#x27;/home/kali/Desktop/学取证咯.raw&#x27; --profile=Win7SP1x64 yarascan -p 2304,2392 -Y &quot;/(URL|REDR|LEAK)/&quot; 能扫出结果就说明yara以及yarapython安装成功 PyCrypto（加密工具集）： 1pip2 install pycrypto PIL（图片处理库）： 1pip2 install Pillow OpenPyxl（读写excel文件）： 1pip2 install openpyxl ujson（JSON解析）： 1pip2 install ujson 官方帮助#输入vol.py --h 查看官方做出的帮助 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159Volatility Foundation Volatility Framework 2.6.1Usage: Volatility - A memory forensics analysis platform.Options: -h, --help list all available options and their default values. Default values may be set in the configuration file (/etc/volatilityrc) --conf-file=/root/.volatilityrc User based configuration file -d, --debug Debug volatility --plugins=PLUGINS Additional plugin directories to use (colon separated) --info Print information about all registered objects --cache-directory=/root/.cache/volatility Directory where cache files are stored --cache Use caching --tz=TZ Sets the (Olson) timezone for displaying timestamps using pytz (if installed) or tzset -f FILENAME, --filename=FILENAME Filename to use when opening an image --profile=WinXPSP2x86 Name of the profile to load (use --info to see a list of supported profiles) -l LOCATION, --location=LOCATION A URN location from which to load an address space -w, --write Enable write support --dtb=DTB DTB Address --shift=SHIFT Mac KASLR shift address --output=text Output in this format (support is module specific, see the Module Output Options below) --output-file=OUTPUT_FILE Write output in this file -v, --verbose Verbose information --physical_shift=PHYSICAL_SHIFT Linux kernel physical shift address --virtual_shift=VIRTUAL_SHIFT Linux kernel virtual shift address -g KDBG, --kdbg=KDBG Specify a KDBG virtual address (Note: for 64-bit Windows 8 and above this is the address of KdCopyDataBlock) --force Force utilization of suspect profile --cookie=COOKIE Specify the address of nt!ObHeaderCookie (valid for Windows 10 only) -k KPCR, --kpcr=KPCR Specify a specific KPCR address Supported Plugin Commands: amcache Print AmCache information apihooks Detect API hooks in process and kernel memory atoms Print session and window station atom tables atomscan Pool scanner for atom tables auditpol Prints out the Audit Policies from HKLM\\SECURITY\\Policy\\PolAdtEv bigpools Dump the big page pools using BigPagePoolScanner bioskbd Reads the keyboard buffer from Real Mode memory cachedump Dumps cached domain hashes from memory callbacks Print system-wide notification routines clipboard Extract the contents of the windows clipboard cmdline Display process command-line arguments cmdscan Extract command history by scanning for _COMMAND_HISTORY connections Print list of open connections [Windows XP and 2003 Only] connscan Pool scanner for tcp connections consoles Extract command history by scanning for _CONSOLE_INFORMATION crashinfo Dump crash-dump information deskscan Poolscaner for tagDESKTOP (desktops) devicetree Show device tree dlldump Dump DLLs from a process address space dlllist Print list of loaded dlls for each process driverirp Driver IRP hook detection drivermodule Associate driver objects to kernel modules driverscan Pool scanner for driver objects dumpcerts Dump RSA private and public SSL keys dumpfiles Extract memory mapped and cached files dumpregistry Dumps registry files out to disk editbox Displays information about Edit controls. (Listbox experimental.) envars Display process environment variables eventhooks Print details on windows event hooks evtlogs Extract Windows Event Logs (XP/2003 only) filescan Pool scanner for file objects gahti Dump the USER handle type information gditimers Print installed GDI timers and callbacks gdt Display Global Descriptor Table getservicesids Get the names of services in the Registry and return Calculated SID getsids Print the SIDs owning each process handles Print list of open handles for each process hashdump Dumps passwords hashes (LM/NTLM) from memory hibinfo Dump hibernation file information hivedump Prints out a hive hivelist Print list of registry hives. hivescan Pool scanner for registry hives hpakextract Extract physical memory from an HPAK file hpakinfo Info on an HPAK file idt Display Interrupt Descriptor Table iehistory Reconstruct Internet Explorer cache / history imagecopy Copies a physical address space out as a raw DD image imageinfo Identify information for the image impscan Scan for calls to imported functions joblinks Print process job link information kdbgscan Search for and dump potential KDBG values kpcrscan Search for and dump potential KPCR values ldrmodules Detect unlinked DLLs lsadump Dump (decrypted) LSA secrets from the registry machoinfo Dump Mach-O file format information malfind Find hidden and injected code mbrparser Scans for and parses potential Master Boot Records (MBRs) memdump Dump the addressable memory for a process memmap Print the memory map messagehooks List desktop and thread window message hooks mftparser Scans for and parses potential MFT entries moddump Dump a kernel driver to an executable file sample modscan Pool scanner for kernel modules modules Print list of loaded modules multiscan Scan for various objects at once mutantscan Pool scanner for mutex objects notepad List currently displayed notepad text objtypescan Scan for Windows object type objects patcher Patches memory based on page scans poolpeek Configurable pool scanner plugin printkey Print a registry key, and its subkeys and values privs Display process privileges procdump Dump a process to an executable file sample pslist Print all running processes by following the EPROCESS lists psscan Pool scanner for process objects pstree Print process list as a tree psxview Find hidden processes with various process listings qemuinfo Dump Qemu information raw2dmp Converts a physical memory sample to a windbg crash dump screenshot Save a pseudo-screenshot based on GDI windows servicediff List Windows services (ala Plugx) sessions List details on _MM_SESSION_SPACE (user logon sessions) shellbags Prints ShellBags info shimcache Parses the Application Compatibility Shim Cache registry key shutdowntime Print ShutdownTime of machine from registry sockets Print list of open sockets sockscan Pool scanner for tcp socket objects ssdt Display SSDT entries strings Match physical offsets to virtual addresses (may take a while, VERY verbose) svcscan Scan for Windows services symlinkscan Pool scanner for symlink objects thrdscan Pool scanner for thread objects threads Investigate _ETHREAD and _KTHREADs timeliner Creates a timeline from various artifacts in memory timers Print kernel timers and associated module DPCs truecryptmaster Recover TrueCrypt 7.1a Master Keys truecryptpassphrase TrueCrypt Cached Passphrase Finder truecryptsummary TrueCrypt Summary unloadedmodules Print list of unloaded modules userassist Print userassist registry keys and information userhandles Dump the USER handle tables vaddump Dumps out the vad sections to a file vadinfo Dump the VAD info vadtree Walk the VAD tree and display in tree format vadwalk Walk the VAD tree vboxinfo Dump virtualbox information verinfo Prints out the version information from PE images vmwareinfo Dump VMware VMSS/VMSN information volshell Shell in the memory image windows Print Desktop Windows (verbose details) wintree Print Z-Order Desktop Windows Tree wndscan Pool scanner for window stations yarascan Scan process or kernel memory with Yara signatures 命令格式#1234567891011volatility -f [image] --profile=[profile] [plugin]volatility -f [对象] --profile=[操作系统] [插件参数]在分析之前，需要先判断当前的镜像信息，分析出是哪个操作系统 命令imageinfo即可获取镜像信息。 Volatility -f xxx.vmem imageinfo在查到操作系统后如果不确定可以使用以下命令查看volatility - f xxx.vmem --profile= [操作系统] volshell 常用命令#12345678910111213123.raw为镜像文件，test.xxx为外部保存文件，文件路径均默认使用/home/kali/Desktop/，Win7SP1x64为系统版本，0xffff111111为虚拟内存地址，0x0000111111为物理内存地址&#x27;/home/kali/Desktop/exes&#x27;是生成文件存放目录 查看镜像文件系统摘要信息：#1volatility -f home/kali/Desktop/123.raw imageinfo 筛选： | greb abc 用户相关#查看用户名和密码（hash值）#1volatility -f home/kali/Desktop/123.raw --profile=Win7SP1x64 hashdump 从注册表中查看密码：#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 lsadump 使用mimikatz插件查看密码（需要进入插件目录）#1vol.py --plugin=./ -f home/kali/Desktop/123.raw --profile=Win7SP1x64 mimikatz cmd相关#查看cmd使用情况#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 cmdscan 查看cmd详细情况#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 cmdline 抓取控制台下执行的命令以及回显数据#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 consoles 进程相关#扫描内存中的进程#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 psscan 列举全部进程#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 pslist 查看进程结构图#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 pstree 查看隐藏进程#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 psxview 找出隐藏在内存中的dll文件和代码#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 malfind 列出每个进程已加载的dll#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 dlllist -n 111.exe 其中111.exe为进程名 将进程程序提取出来#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 memdump -p 1111 -D &#x27;/home/kali/Desktop/exes&#x27; 其中1111,2222为进程pid 显示内存中多种事件的时间线#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 timeliner 显示进程的环境变量#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 envar 显示进程的运行权限#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 privs 导出当前进程的可执行文件#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 procdump -p 1111 -D &#x27;/home/kali/Desktop/exes&#x27; 其中1111,2222为进程pid 最大程序提取信息#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 timeliner 程序版本信息#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 verinfo 通过yarascan来定义YARA规则进行搜索#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 yarascan -p 1111,2222 -Y &quot;/(URL|REDR|LEAK)/&quot; 其中1111,2222为进程pid，&quot;/(URL|REDR|LEAK)/&quot;为yarascan自定义规则 文件相关#扫描文件#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 filescan 提取文件#12345678vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 dumpfiles -Q 0x0000111111 --dump-dir=&#x27;/home/kali/Desktop/exes&#x27;-n, --name #在转储出来的文件的文件名中加入原来的文件名-u, --unsafe #放松安全约束来获取更多信息-r, --regex #转储符合正则表达式的文件-i, --ignore-case #在正则表达式中忽略大小写导出的文件名有三种后缀.img .dat .vacb其中.dat文件可以直接修改后缀为原文件后缀使用 抓取删除的文件#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 mftparser 扫描内存中潜在的主引导记录#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 mbrparser 扫描在内存中潜在NTFS主文件表记录(MFT)#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 mftparser 就算删除了文件，在MFT中这条记录会被标记为free，但是实际文件是仍然没有被真正删除的，只要原来的文件没有被新文件覆盖，就可以完整恢复被删除的文件。在mftparser的$DATA就可以看见文件的数据了 检测和分析内存中的恶意软件特征#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 malfind 从内存文件中找到异常程序植入到系统的开机自启痕迹#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64shimcache 注册表相关#打印 userassist 注册表项和信息，查看运行程序相关记录#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 userassist 查看注册表蜂巢文件，显示内存中的注册表配置单元和对应的路径#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 hivelist 可以对蜂巢根目录进行dump，查看注册表键名子项#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 -o 0xffff111111 hivedump 导出的注册表的后缀为.reg，但是不能直接挂载，可以用WRR转换成Windows可以挂载的格式或直接阅读 查看注册表键值#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 -o 0xffff111111 printkey -K &quot;ControlSet001\\Control&quot; &quot;ControlSet001\\Control&quot;是注册表子项 通常主机名位置：ControlSet001\\Control\\ComputerName\\ComputerName 通常用户名位置：SAM\\Domains\\Account\\Ueers\\Names 导出shellbags注册表项#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 shellbags 关于shellbags注册表项：是一组用来记录文件夹（包括挂载网络驱动器文件夹和挂载设备的文件夹）的名称、大小、图标、视图、位置的注册表项。每次对文件夹的操作，shellBags的信息都会更新，而且包含时间戳信息。是Windows系统改善用户体验的功能之一。即使删除文件夹后，shellBags仍然会保留文件夹的信息 将内存中的注册表配置单元导出至磁盘#12vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 dumpregistry -D &#x27;/home/kali/Desktop/exes&#x27; #导出所有注册表到磁盘vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 dumpregistry -o 0xffff111111 -D &#x27;/home/kali/Desktop/exes&#x27; #导出对应虚拟偏移所在的单个注册表 网络相关#扫描全部网络连接#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 netscan 检索已建立的网络连接状态，显示活跃的TCP连接（&#x2F;win7sp1x64不可用）#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x86 connections 查看网络连接状态，显示所有的TCP连接（&#x2F;win7sp1x64不可用）#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x86 connscan 显示所有的套接字连接（&#x2F;win7sp1x64不可用）#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x86 sockets 扫描标签池查找_ADDRESS_OBJECT结构体（&#x2F;win7sp1x64不可用）#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x86 sockscan windows系统相关#查看桌面截图并存储（只有线框图和标题）#1&#x27;/home/kali/Desktop/exes&#x27;vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 screenshot --dump-dir=&#x27;/home/kali/Desktop/exes&#x27; 查看notepad文件（只能查看进程中的notepad.exe中的内容）#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 notepad 查看内存中Windows剪切板中的内容#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 clipboard 打印系统所有桌面窗口的信息#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 windows 以树状形式打印系统所有的窗口简略信息#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 wintree 查看编辑控件信息#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 editbox 查看ie浏览器历史浏览记录#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 iehistory 扫描windows的服务#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 svcscan 查看环境变量#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 envars 内存映像交互访问命令行工具#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64vvol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 volshell linux相关#查看linux_bash命令#1vol.py -f dump.mem --profile=LinuxCentos7_3_10_1062x64 linux_bash 分析Linux系统中的进程和进程环境#1vol.py -f dump.mem --profile=LinuxCentos7_3_10_1062x64 linux_psaux 查看linux系统的dmesg缓冲区中日志消息#1vol.py -f dump.mem --profile=LinuxCentos7_3_10_1062x64 linux_dmesg 检查Linux系统调用表是否被修改过#1vol.py -f dump.mem --profile=LinuxCentos7_3_10_1062x64 linux_check_syscall | grep HOOKED"},{"title":"uh,hi?","path":"2024/01/23/uh-hi/","text":"meao？"}]