[{"title":"CTF 常见密码编码及其解决方案","path":"2024/04/07/CTF 常见密码编码及其特征/","text":"CTF 常见密码编码及其解决方案#一些工具（在线）#CyberChef：very very goooood sojson.com CTF在线工具 随波逐流工作室：very good 千千秀字：里面有一些很多自创的奇怪加密算法…… 一些工具（离线）#CyberChef，[随波逐流]CTF编码工具 计算机常用编码类#字符编码wiki ASCII编码#wiki ASCII（发音： &#x2F;ˈæski&#x2F;），American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统。它主要用于显示现代英语，而其扩展版本延伸美国标准信息交换码则可以部分支持其他西欧语言，并等同于国际标准**ISO&#x2F;IEC 646**。 URL编码#wiki 百分号编码（英语：Percent-encoding），又称URL编码（URL encoding）是特定上下文的统一资源定位符（URL）的编码机制，实际上也适用于统一资源标志符（URI）的编码。也用于为application&#x2F;x-www-form-urlencoded MIME准备数据，因为它用于通过HTTP的请求操作（request）提交HTML表单数据。 Base家族#Base64 wiki Base64（基底64）是一种基于64个可打印字符来表示二进制数据的表示方法。由于log2⁡64&#x3D;6，所以每6个比特为一个单元，对应某个可打印字符。3个字节相当于24个比特，对应于4个Base64单元，即3个字节可由4个可打印字符来表示。在Base64中的可打印字符包括字母A-Z、a-z、数字0-9，这样共有62个字符，此外两个可打印符号在不同的系统中而不同。 Base32 wiki 此外还有Base16，Base36，Base58，Base62，Base85，Base91，Base92…… Shellcode编码#wiki shellcode是一段用于利用软件漏洞而执行的代码，shellcode为16进制之机械码，以其经常让攻击者获得shell而得名。shellcode常常使用机器语言编写，由于现代电脑系统基本上启用NX位元保护使得机械码无法直接执行，可透过返回导向编程编写shellcode。 可在暂存器eip溢出后，塞入一段可让CPU执行的shellcode机械码，让电脑可以执行攻击者的任意指令。 1特征：Shellcode编码中含有\\x，形如：\\x66\\x6c\\x61\\x67 UUencode#wiki uuencode这个名字是衍生自”Unix-to-Unix encoding”，原先是Unix系统下将二进制的资料借由uucp邮件系统传输的一个编码程式，是一种二进制到文字的编码。 12特征：对于长消息来说:每行开头都是M。对于短消息特征就是字符串有&#x27;($&lt;&gt;)这类字符 XXEncode编码#wiki xxencode是一种二进制到文本的编码类似于uuencode，它仅使用字母数字字符以及加号和减号。它的发明是为了以一种能够在字符集转换中幸存的格式传输文件，特别是在ASCII和IBM 大型机上使用的EBCDIC编码之间。 12特征：大小写字母，数字以及+-字符2NalVNk++ Unicode编码#wiki Unicode，全称为Unicode标准（The Unicode Standard），其官方机构Unicode联盟所用的中文名称为统一码，又译作万国码、统一字元码、统一字符编码，是信息技术领域的业界标准，其整理、编码了世界上大部分的文字系统，使得电脑能以通用划一的字符集来处理和显示文字，不但减轻在不同编码系统间切换和转换的困扰，更提供了一种跨平台的乱码问题解决方案。 1特征：\\u5b89\\u5c0f\\u742a Escape编码#escape采用ISO Latin字符集对指 定的字符串进行编码。所有的空格符、标点符号、特殊字符以及其他非ASCII字符都将被转化成%xx格式的字符编码(xx等于该字符在字符集表里面的编码的16进制数字)。 123特点：有一组 字符 String ss = &quot;%u5179&quot;，特点是 以%u开头，后接四位16进制数字该字符是4个数字表示一个字符。或者是%开头，后接 //数字//小写字母//大写字母 Quoted-printable编码#wiki Quoted-printable或QP encoding，没有规范的中文译名，可译为可打印字符引用编码或使用可打印字符的编码。Quoted-printable是使用可打印的ASCII字符（如字母、数字与“&#x3D;”）表示各种编码格式下的字符，以便能在7-bit数据通路上传输8-bit数据, 或者更一般地说在非8-bit clean媒体上正确处理数据。这被定义为MIME content transfer encoding，用于e-mail。 1特征：=开头 字符值引用#wiki 字符值引用（numeric character reference, NCR）是在标记语言SGML以及派生的如HTML与XML中常见的一种转义序列结构，用来表示Unicode的通用字符集 （UCS）中的单个字符. NCR可以表示在一个特定文档中不能直接编码的字符，而该标记语言阅读器软件把每个NCR当作一个字符来处理。 1特征：&amp;#开头 RTF富文本格式#wiki 富文本格式（Rich Text Format）即RTF格式，又称多文本格式，是由微软公司开发的跨平台文档格式。大多数的文字处理软件都能读取和保存RTF文档。 1特征：\\rtf开头，中间含有\\开头的其他组合以及&#123;&#125; 哈希#wiki 算法名称 输出大小(bits) 内部大小 区块大小 长度大小 字符尺寸 碰撞情形 HAVAL 256&#x2F;224&#x2F;192&#x2F;160&#x2F;128 256 1024 64 32 是 MD2 128 384 128 No 8 大多数 MD4 128 128 512 64 32 是 MD5 128 128 512 64 32 是 PANAMA 256 8736 256 否 32 是 RadioGatún 任意长度 58字 3字 否 1-64 否 RIPEMD 128 128 512 64 32 是 RIPEMD-128&#x2F;256 128&#x2F;256 128&#x2F;256 512 64 32 否 RIPEMD-160&#x2F;320 160&#x2F;320 160&#x2F;320 512 64 32 否 SHA-0 160 160 512 64 32 是 SHA-1 160 160 512 64 32 有缺陷 SHA-256&#x2F;224 256&#x2F;224 256 512 64 32 否 SHA-512&#x2F;384 512&#x2F;384 512 1024 128 64 否 Tiger（2）-192&#x2F;160&#x2F;128 192&#x2F;160&#x2F;128 192 512 64 64 否 WHIRLPOOL 512 512 512 256 8 否 一些在线解密网站： https://www.sojson.com/hash.html https://www.somd5.com/ python相关库：hashlib 替换密码#ROT加密#wiki ROT13（回转13位，英语：rotate by 13 places，有时也记为ROT-13）是一种简易的替换式密码。ROT13 也是过去在古罗马开发的凯撒加密的一种变体。ROT13是它自己本身的逆反。 123| ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz || ---------------------------------------------------- || NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm | 检查字符字母顺序并取代它在13位之后的对应字母，有需要超过时则重新绕回26英文字母开头即可 rot5,rot18等同理 rot47在26个字母基础上扩大范围至ascii可打印字符，ascii范围为33－126（原因是由于0-32以及127与字符表示无关） 凯撒密码#wiki 凯撒密码（英语：Caesar cipher），或称凯撒加密、凯撒变换、变换加密，是一种最简单且最广为人知的加密技术。凯撒密码是一种替换加密技术，明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成密文。 当偏移量是3的时候，所有的字母A将被替换成D，B变成E，以此类推。 变异凯撒# 埃特巴什码#wiki 埃特巴什码（Atbash Cipher）是由熊斐特博士发现的密码，其最后一个字母代表第一个字母，倒数第二个字母代表第二个字母 12A B C D E F G H I J K L M N O P Q R S T U V W X Y ZZ Y X W V U T S R Q P O N M L K J I H G F E D C B A Hill密码（希尔密码）#wiki 希尔密码是运用基本矩阵论原理的替换密码，由Lester S. Hill在1929年发明。 每个字母当作26进制数字：A&#x3D;0, B&#x3D;1, C&#x3D;2… 一串字母当成n维向量，跟一个n×n的矩阵相乘，再将得出的结果模26。 注意用作加密的矩阵（即密匙）在必须是可逆的，否则就不可能解码。只有矩阵的行列式和26互质，才是可逆的。 在线解密：http://www.atoolbox.net/Tool.php?Id=914 仿射密码#wiki 仿射密码是一种替换密码。它是一个字母对一个字母的。 它的加密函数是，其中 和互质。 是字母的数目。 解码函数是，其中是在群的乘法逆元。 仿射密码 为 单表加密的一种，字母系统中所有字母都藉一简单数学方程加密，对应至数值，或转回字母。 其仍有所有替代密码之弱处。所有字母皆借由方程 加密， 为移动大小。 在线解密：http://www.hiencode.com/affine.html 奇奇怪怪的加密#UTF-8，unicode乱码#锟斤拷，烫烫烫 注意编码格式捏 零宽字符隐写#零宽度字符隐写术（Zero-Width Space Steganography）： 将隐藏消息编码和解码为不可打印&#x2F;可读字符。 字符包括： 零宽度空格（\\u200b） 零宽度非连接符（\\u200c） 零宽度连接符（\\u200d） 从左至右书写标记（\\u200e） 从右至左书写标记（\\u200f） 解密 在线工具#https://www.mzy0.com/ctftools/zerowidth1/ http://330k.github.io/misc_tools/unicode_steganography.html https://offdev.net/demos/zwsp-steg-js https://yuanfux.github.io/zero-width-web/ http://www.atoolbox.net/Tool.php?Id=829 其他工具# zwsp-steg-py https://github.com/enodari/zwsp-steg-py 转换 转化为二进制的加密：https://zhuanlan.zhihu.com/p/87919817 转化为Morse编码的加密：https://zhuanlan.zhihu.com/p/75992161 文本加密字母&#x2F;汉字等等（有规律，写完文档去爆破一下）#自创算法，但会在比赛里出现？ 1特征：一个字母加密后变为两个字母，相邻字母相关，结尾有= https://www.qqxiuzi.cn/bianma/wenbenjiami.php 社会主义核心价值观编码#用核心价值观来说些黑话（bushi） https://sym233.github.io/core-values-encoder/ http://www.hiencode.com/cvencode.html https://atool.vip/corevalue/ http://www.hiencode.com/cvencode.html 与佛论禅#解密的时候不要忘记加上“佛曰”两个字哦 在线加解密： http://hi.pcmoe.net/buddha.html https://www.keyfc.net/bbs/tools/tudoucode.aspx https://talk-with-buddha.netlify.app/ https://ctf.bugku.com/tool/todousharp https://wtool.com.cn/buddha.html 与熊论道# 在线解密：http://hi.pcmoe.net/ 兽音#也可以自定义兽音 在线加解密： https://roar.iiilab.com/ http://hi.pcmoe.net/roar.html 云影密码#有1，2，4，8这四个数字，可以通过加法来用这四个数字表示0-9中的任何一个数字，列如0&#x3D;28， 也就是0&#x3D;2+8，同理7&#x3D;124， 9&#x3D;18。这样之后再用1-26来表示26个英文字母，就有了密文与明文之间的对应关系。引入0来作为间隔，以免出现混乱。所以云影密码又叫“01248密码”。 解密脚本： 123456789101112131415161718192021222324252627282930313233343536373839404142434445#!/usr/bin/python# -*- coding=utf8 -*-&quot;&quot;&quot;# @Author : pig# @CreatedTime:2019-11-2423:54:02# @Description : &quot;&quot;&quot;def de_code(c): dic = [chr(i) for i in range(ord(&quot;A&quot;), ord(&quot;Z&quot;) + 1)] flag = [] c2 = [i for i in c.split(&quot;0&quot;)] for i in c2: c3 = 0 for j in i: c3 += int(j) flag.append(dic[c3 - 1]) return flagdef encode(plaintext): dic = [chr(i) for i in range(ord(&quot;A&quot;), ord(&quot;Z&quot;) + 1)] m = [i for i in plaintext] tmp = [];flag = [] for i in range(len(m)): for j in range(len(dic)): if m[i] == dic[j]: tmp.append(j + 1) for i in tmp: res = &quot;&quot; if i &gt;= 8: res += int(i/8)*&quot;8&quot; if i%8 &gt;=4: res += int(i%8/4)*&quot;4&quot; if i%4 &gt;=2: res += int(i%4/2)*&quot;2&quot; if i%2 &gt;= 1: res += int(i%2/1)*&quot;1&quot; flag.append(res + &quot;0&quot;) print (&quot;&quot;.join(flag)[:-1])c = input(&quot;输入要解密的数字串:&quot;)print (de_code(c))m_code = input(&quot;请输入要加密的数字串:&quot;)encode(m_code) Rabbit密码#Rabbit 是一种高速流密码，于 2003 年在 FSE 研讨会上首次提出。 Rabbit 使用一个 128 位密钥和一个 64 位初始化向量。 该加密算法的核心组件是一个位流生成器，该流生成器每次迭代都会加密 128 个消息位。 12特征：1.组成：26个大小写英文字母 2.以U2FsdGVkX1开头，可能以=结尾 在线解密：https://www.sojson.com/encrypt_rabbit.html 非对称密码加密#RSA#wiki 在线解密：https://www.bejson.com/enc/rsa/ DSA#wiki 在线解密：https://try8.cn/tool/cipher/dsa 对称密码加密#AES#wiki 在线解密：https://tool.lmeee.com/jiami/aes DES#wiki 在线解密：https://www.sojson.com/encrypt_des.html RC4#wiki 在线解密：https://www.sojson.com/encrypt_rc4.html playfair密码#普莱费尔密码（英语：Playfair cipher）是一种对称式密码，是首种双字母取代的加密法。 1234567加密方法：选取一个英文字作密钥。除去重复出现的字母。将密钥的字母逐个逐个加入5×5的矩阵内，剩下的空间将未加入的英文字母依a-z的顺序加入。（将Q去除，或将I和J视作同一字。）将要加密的讯息分成两个一组。若组内的字母相同，将X（或Q）插入两字母之间，重新分组（例如 HELLO 将分成 HE LX LO）。若剩下一个字，也加入X字。在每组中，找出两个字母在矩阵中的地方。若两个字母不在同一直行或同一横列，在矩阵中找出另外两个字母，使这四个字母成为一个长方形的四个角。若两个字母在同一横行，取这两个字母右方的字母（若字母在最右方则取最左方的字母）。若两个字母在同一直列，取这两个字母下方的字母（若字母在最下方则取最上方的字母）。新找到的两个字母就是原本的两个字母加密的结果。 解密网站：https://www.metools.info/code/playfair_186.html serpent加密#wiki 在线解密：http://tool.chacuo.net/cryptserpent twofish加密#wiki 在线解密：https://try8.cn/tool/cipher/twofish 博福特密码（Beaufort Cipher）#wiki 示例 例如，明文的第一个字母为D，则先在表格中找到第D列。由于密钥的第一个字母为F，于是D列从上往下找到F。这一F对应的行号为C，因而C便是密文的第一个字母。以此类推可以得到密文。以下便是一个密钥为FORTIFICATION时的例子： 123明文：DEFENDTHEEASTWALLOFTHECASTLE密钥：FORTIFICATIONFORTIFICATIONFO密文：CKMPVCPVWPIWUJOGIUAPVWRIWUUK 在线解密：http://www.hiencode.com/beaufort.html 维吉尼亚密码#wiki 一个凯撒密码中，字母表中的每一字母都会作一定的偏移，例如偏移量为3时，A就转换为了D、B转换为了E……而维吉尼亚密码则是由一些偏移量不同的凯撒密码组成。 为了生成密码，需要使用表格法。这一表格包括了26行字母表，每一行都由前一行向左偏移一位得到。具体使用哪一行字母表进行编译是基于密钥进行的，在过程中会不断地变换。 例如，假设明文为： 1ATTACKATDAWN 选择某一关键词并重复而得到密钥，如关键词为LEMON时，密钥为： 1LEMONLEMONLE 对于明文的第一个字母A，对应密钥的第一个字母L，于是使用表格中L行字母表进行加密，得到密文第一个字母L。类似地，明文第二个字母为T，在表格中使用对应的E行进行加密，得到密文第二个字母X。以此类推，可以得到： 123明文：ATTACKATDAWN密钥：LEMONLEMONLE密文：LXFOPVEFRNHR 解密的过程则与加密相反。例如：根据密钥第一个字母L所对应的L行字母表，发现密文第一个字母L位于A列，因而明文第一个字母为A。密钥第二个字母E对应E行字母表，而密文第二个字母X位于此行T列，因而明文第二个字母为T。以此类推便可得到明文 在线解密：http://www.hiencode.com/vigenere.html 滚动密钥密码#同维吉尼亚密码 在线解密：http://www.hiencode.com/runkey.html 同音替换密码# 大多为自创密码表，难以破解，很少见的啦 培根密码#wiki 摩斯密码#wiki 在线解密：https://www.bejson.com/enc/morse/ 栅栏密码#所谓栅栏密码，就是把要加密的明文分成N个一组，然后把每组的第1个字连起来，形成一段无规律的话。 在线解密：https://www.metools.info/code/fence155.html 栅栏密码变种W型#wiki 在线解密：https://www.metools.info/code/fence154.html 词频分析#在线解密：http://www.aihanyu.org/cncorpus/CpsTongji.aspx https://quipqiup.com/ 键盘密码·QWE替换# 键盘密码·QWE包围#解密方式：每组密文所围住的按键上的字符例: yujnbg, 观察键盘发现这六个字母围住了h，故明文为h。 键盘密码·九一#此类键盘密码的特征是有两种形式，重复的数字、重复的英文。 ooo yyy ii w uuu ee uuuu yyy uuuu y w uuu ·发现密文全在键盘字母第一行，若再上一行，则会得到字母与数字的映射关系，例如：q对应1，w对映2。 ·此时会发现数字全都是小于10的，对应九宫格拼音，又重复次数在四次以内，则重复次数是一宫中的行坐标。 例：ooo -&gt; 999 -&gt; y 键盘密码·九键# 两个一组对照：例如21对应A，52对应K，94对应Z 曲路密码# 猪圈密码#wiki 猪圈密码变种# 棋盘密码Polybius密码# 明文：HELLO 密文：23 15 31 31 34 棋盘密码变种（ADFGX 密码）# 12·使用这种密码表的加密也叫作 ADFGX 密码（密文中只有 A D F G X）·明文：HELLO 密文：DD XF AG AG DF ADFGVX密码#wiki 在线解密：http://www.atoolbox.net/Tool.php?Id=917 棋盘密码变种 (关键字密码Nihilist)#关键字就是一种秘钥，由字母组成，由加密双方约定而成。密码表有25个位置，依次不重复的填入秘钥，在不重复的填入a~z. 双密码#两个密钥进行加密 123456 1 2 3 4 51| p h q g m2| e a y l n3| o f d x k4| r c v s z5| w b u t i/j 明文:THE QUICK BROWN FOX 经过密阵转换： 行:512 15543 54352 333 列:421 33525 21115 214 分组: 1251215 54354 35233 342133 52521 11521 4 合并： 15121542133 5435452521 3523311521 34 在经过密阵转换后密文:WETED TKZNE KYOME X 在线解密：http://www.hiencode.com/bifid.html 三分密码#wiki 1三分密码与双密码非常相似，差别之处就是用除了3×3×3的密阵代替5×5密阵。 示例密阵: 12345678密阵顺序 = EPSDUCVWYM.ZLKXNBTFGORIJHAQ密阵顺序 = EPSDUCVWYM.ZLKXNBTFGORIJHAQ 方阵 1 方阵 2 方阵 3 1 2 3 1 2 3 1 2 3 1 E P S 1 M . Z 1 F G O 2 D U C 2 L K X 2 R I J 3 V W Y 3 N B T 3 H A Q 明文:THE QUICK BROWN FOX. 经过密阵转换： 12345T H E Q U I C K B R O W N F O X .2 3 1 3 1 3 1 2 2 3 3 1 2 3 3 2 23 3 1 3 2 2 2 2 3 2 1 3 3 1 1 2 13 1 1 3 2 2 3 2 2 1 3 2 1 1 3 3 2T(233)表示T在第一个方阵第三行第三列的 位置 分组(分组密钥以5为例): 1234THEQU ICKBR OWNFO X.23131 31223 31233 2233132 22232 13311 2131132 23221 32113 32 合并： 123131 33132 31132 31223 22232 23221 31233 13311 32113 22 21 32 在经过密阵转换后密文: 12231313313231132312232223223221312331331132113222132N O O N W G B X X L G H H W S K W 四方密码#wiki 首先选择两个英文字作密匙，例如example和keyword。对于每一个密匙，将重复出现的字母去除，即example要转成exampl，然后将每个字母顺序放入矩阵，再将余下的字母顺序放入矩阵，便得出加密矩阵。 将这两个加密矩阵放在右上角和左下角，余下的两个角放a到z顺序的矩阵： 1234567891011a b c d e E X A M Pf g h i j L B C D Fk l m n o G H I J Kp r s t u N O R S Tv w x y z U V W Y Z K E Y W O a b c d eR D A B C f g h i jF G H I J k l m n oL M N P S p r s t uT U V X Z v w x y z 加密的步骤： 两个字母一组地分开讯息：（例如hello world变成he ll ow or ld） 找出第一个字母在左上角矩阵的位置 12345678910a b c d e E X A M Pf g h i j L B C D Fk l m n o G H I J Kp r s t u N O R S Tv w x y z U V W Y ZK E Y W O a b c d eR D A B C f g h i jF G H I J k l m n oL M N P S p r s t uT U V X Z v w x y z 同样道理，找第二个字母在右下角矩阵的位置： 12345678910a b c d e E X A M Pf g h i j L B C D Fk l m n o G H I J Kp r s t u N O R S Tv w x y z U V W Y ZK E Y W O a b c d eR D A B C f g h i jF G H I J k l m n oL M N P S p r s t uT U V X Z v w x y z 找右上角矩阵中，和第一个字母同row(横)，第二个字母同column(直)的字母： 12345678910a b c d e E X A M Pf g h i j L B C D Fk l m n o G H I J Kp r s t u N O R S Tv w x y z U V W Y ZK E Y W O a b c d eR D A B C f g h i jF G H I J k l m n oL M N P S p r s t uT U V X Z v w x y z 找左下角矩阵中，和第一个字母同column(直) ，第二个字母同row(横)的字母： 12345678910a b c d e E X A M Pf g h i j L B C D Fk l m n o G H I J Kp r s t u N O R S Tv w x y z U V W Y ZK E Y W O a b c d eR D A B C f g h i jF G H I J k l m n oL M N P S p r s t uT U V X Z v w x y z 这两个字母就是加密过的讯息。 help me obiwan kenobi的加密结果： 12he lp me ob iw an ke no biFY GM KY HO BX MF KK KI MD 在线解密：http://www.metools.info/code/four-square244.html 二方密码#wiki 二方密码比四方密码用更少的矩阵。 得出加密矩阵的方法和四方密码一样。 例如用“example”和“keyword”作密匙，加密“lp”。首先找出第一个字母（L）在上方矩阵的位置，再找出第二个字母（P）在下方矩阵的位置： 1234567891011E X A M PL B C D FG H I J KN O R S TU V W Y Z K E Y W OR D A B CF G H I JL M N P ST U V X Z 在上方矩阵找第一个字母同行，第二个字母同列的字母；在下方矩阵找第一个字母同列，第二个字母同行的字母，那两个字母就是加密的结果： 1234567891011E X A M PL B C D FG H I J KN O R S TU V W Y Z K E Y W OR D A B CF G H I JL M N P ST U V X Z help me的加密结果： 12he lp meHE DL XW 这种加密法的弱点是若两个字同列，便采用原来的字母，例如he便加密作HE。约有二成的内容都因此而暴露。 Porta密码#Porta密码(Porta Cipher)是一个由意大利那不勒斯的医生Giovanni Battista della Porta发明的多表代换密码 Porta密码具有加密解密过程的是相同的特点 明文：THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG 密钥(循环使用，密钥越长相对破解难度越大)：CULTURE 加密过程：明文字母’T’列与密钥字母’C’行交点就是密文字母’F’,以此类推。 密文：FRW HKQRY YMFMF UAA OLWHD ALWI JPT ZXHC NGV 在线解密：http://www.hiencode.com/porta.html 波利比奥斯方阵#波利比奥斯方阵密码（Polybius Square Cipher或称波利比奥斯棋盘）是棋盘密码的一种，是利用波利比奥斯方阵进行加密的密码方式，简单的来说就是把字母排列好，用坐标(行列)的形式表现出来。字母是密文，明文便是字母的坐标。 Bazeries密码#Bazeries密码(Bazeries Cipher)是换位密码和替换密码的组合，使用两个波利比奥斯方阵，一个明文字母方阵，使用一个随机的数字(一般小于1000000)的生成一个密钥矩阵同时作为第一轮明文划分分组，比如2333这个数字翻译为英文便是TWO THOUSAND THREE HUNDRED THIRTY THREE,从第一个字母T开始选取不重复的字母，之后再从字母表中按序选取没有出现的字母组成密钥矩阵。 明文:THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG 随机数字:2333 明文矩阵: 12345A F L Q VB G M R WC H N S XD I/J O T YE K P U Z 示例密钥矩阵： 12345T W O H US A N D RE I/J Y B CF G K L MP Q V X Z 明文分组： 12342 3 3 3 2 3 3 3 2 3 3 3 3TH EQU ICK BRO WN FOX JUM PSO VE RTH ELA ZYD OG分组明文反序:HT UQE KCI ORB WN XOF MUJ OSP EV EHT ALE DYZ GO 使用密钥矩阵替换: 12IL XHP QEG KDS YR CKW NXG KBV PU ILD TOP FMZ AK(比如’H’在明文矩阵对应到密钥矩阵的位置就是’I’） Digrafid密码#Digrafid密码(Digrafid Cipher)使用两个密钥生成分别生成类似波利比奥斯方阵的3×9方格的密表。 格朗普雷密码#简介：格朗普雷密码是替换密码的一种，一般使用8个8字母的单词横向填充8x8方阵，且第一列为一个单词，并且在方阵中26个字母都必须出现一次以上。 举例： 说明：明文中的字母在密阵位置可能不止一个，所以加密结果可能有多种，但是不影响解密。密阵还有6×6、7×7、9×9、10×10、几种。显然密阵越大每个字母被替换的情况就可能越多，那么加密效果就更好。 比尔密码#比尔密码（英文：Beale ciphers）是在1885年出版的一本小册子中提到的三份密码；根据被破解的第二份密码，第一份密码说明了财宝的位置，第二份密码则说明了财宝的内容，第三份密码则列出了财宝所有者的姓名。 当铺密码#原理：根据当前汉字有多少笔画出头，对应的明文就是数字几。 在线解密：https://dsb.ink/ctf/dangpu.html JS混淆类#颜文字符号（aaencode）#1特征：一堆颜文字构成的js代码 在线解密：http://www.atoolbox.net/Tool.php?Id=703 JJEncode编码#123特征：大量 $、_ 符号，大量重复的自定义变量[]()!+,\\&quot;$.:;_&#123;&#125;~= 在线解密：https://www.toolkk.com/tools/jjencode-encode-decode jother编码#1特征：只用! + ( ) [ ] &#123; &#125;这八个字符就能完成对任意字符串的编码。也可在F12中解密执行 在线解密：https://vulsee.com/tools/jother/index.htm JSFuck编码#123特征：[]()!+组成(![]+[])[+[]]+(![]+[])[!+[]+!+[]]+(![]+[])[+!+[]]+(![]+[+[]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+ 在线解密：http://www.hiencode.com/jsfuck.html Brainfuck#1++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]++.&gt;+.+++++++…+++.&gt;++.&lt;&lt;+++++++++++++++…+++.------.--------.&gt;+.&gt; 在线解密：https://ctf.bugku.com/tool/brainfuck Ook加密#1Ook! Ook! 在线解密：https://ctf.bugku.com/tool/brainfuck .!?加密#1特征：.!?密码中只含有.!?三个不同的语法元素，使用Ook解密即可。 在线解密：https://www.splitbrain.org/services/ook 阴阳怪气#1就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 在线解密：https://mmdjiji.gitee.io/yygq.js/ BubbleBabble#12编码格式每5个字符中间以-来分隔xinik-samak-loxox 在线解密：http://www.hiencode.com/bubble.html 敲击码# 在线解密：http://www.hiencode.com/tapcode.html Type7混淆加密#简介：Type 7 是一种 Cisco 设备密码加密算法，用于将明文密码加密为不可逆的形式。这种加密算法采用了 XOR 和 MD5 哈希的混合方式，使用一个给定的密钥和额外的固定字符串来生成加密后的密码，因此也被称为 Type 7 混淆加密。 原理：从一个有26个ASCII字符表中，产生一个种子值（Seed Value）（0-52之间）随机抽取一个用来和明文密码的第一个字符异或，产生的结果用16进制表示，放在加密后字符串的第2、3位，然后种子值+1，再去抽取一个用来和明文密码第二个字符异或，16进制结果放在随后的位置位……。 在线解密：http://www.atoolbox.net/Tool.php?Id=992&amp;ac=csdn 博多密码#博多密码，也叫巴拿马密码，是一种古典密码学中的替换密码。它采用了多个字母表，并通过一个基准词来确定加密和解密使用的具体字母表。 原理：将基准词中出现的所有字母按照顺序排列并去除重复字母，得到字母表A；然后将剩余的字母按照字母表顺序排列并去除重复字母，得到字母表B，字母表A和B都包含26个字母；接下来，将明文中的每个字母在字母表A中的位置作为行数，将该字母在字母表B中的位置作为列数，找到对应的密文字母。同理，将密文中的每个字母在字母表B中的位置作为行数，在字母表A中的位置作为列数，找到对应的明文字母。 博多密码的优点是具有较好的安全性，但缺点也很明显，即容易受到频率分析攻击等各种攻击手段的攻击。因此，它已经被更安全的加密算法所取代。 在线解密：https://www.boxentriq.com/code-breaking/baudot-code 人造语言#人造语言wiki：https://yuyan.fandom.com/zh/wiki/Main_Page 八卦与伏羲六十四卦# 伏羲六十四卦 圣堂武士密码# 曲折密码&#x2F;夏多密码# 狄德拉密码# 埃及文字# 外星人密码# 多斯拉克语# 模拟语# 海利亚语# 樊凡语# 跳舞的小人# 神奇宝贝密码# 音符加密# 音乐密码# 海军手旗旗语# 六十甲子# 国际船用信号旗密码# Covenant字体# 费兹象形文字# wingdings字体#wingding编码是一种用于打印的字体，不具有可读性，类似的系列编码还有web dings、wingding 2、wingding3编码 根据编码的特征，doc文档设置字体为宋体、黑体即可看到原文内容 LaTeX#LaTex常见符号对照表查阅表：https://detexify.kirelabs.org/symbols.html LaTex在线编辑器 提瓦特文# 《来自星尘》异星文字# 古精灵语# 盲文#表中第一行只用第1、2、4、5四个点，第二行由第一行加第3点而得，第三行除“w”外其余均由第一行加第3、6点而得，“w”则由第一行加第6点而得。第一行十个字母的符形也有一定规律，前三个字母（abc）和元音字母（aei）只有一个或两个凸点，第4、6、8、10个字母（dfhj）有三个凸点，剩下的g有四个凸点。 特性是1必须有点，如果没有就是2和4必须有点，这样可以让盲人阅读时有一个原点来判断相对位置。 不同点语言的盲文对标点、带音符的拉丁字母以及字母组合有不同的规定。例如盲符⠡，在英语盲文中表示字母组合ch，德语盲文中表示字母组合au，在法语盲文中表示带长音符的字母â。 布莱叶式用前十个字母表示1到0，安托万式的1-9是在布拉耶式基础上加6点，安托万式的0是布拉耶式的数字符号。 阿拉伯数字表示法有布莱叶和安托万两种。布莱叶式比较常用，英语盲文、汉语盲文等众多盲文都使用这种形式；安托万式主要用于法语盲文。 人类语、旧人类语[游戏人生]#世界观：人类语和日语一样，可是写的字不同，文字对应日语五十音拼音字母，数字使用7进制（骰子）。 旧人类语： 安特·伊苏拉语 [打工吧!魔王大人]# 塔语# 《为[美好的世界]献上祝福！》# 魔女文字《魔法少女小圆》# 奈落文字《来自深渊》# 《少女终末旅行》# 诺德林语《幻镜诺德琳》# 凹凸文《凹凸世界》# 克林贡语《星际迷航》# 标准银河字母# 元素周期表#"},{"title":"OtterCTF 2018 取证系列 WP","path":"2024/03/13/OtterCTF/","text":"[OtterCTF 2018] 取证系列# What the password? General Info Play Time Silly Rick Name Game Hide And Seek Name Game 2 Path To Glory Bit 4 Bit Graphic’s For The Weak Path To Glory 2 Recovery Closure 1vol.py -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; imageinfo What the password?# 1vol.py --plugin=/usr/lib/python2.7/dist-packages/volatility/plugins/ -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; --profile=Win7SP1x64 mimikatz MortyIsReallyAnOtter NSSCTF&#123;MortyIsReallyAnOtter&#125; General Info# 1vol.py -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; --profile=Win7SP1x64 hivelist 主机名会储存在\\REGISTRY\\MACHINE\\SYSTEM中的ControlSet001\\Control\\ComputerName\\ComputerName条目中 1vol.py -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; --profile=Win7SP1x64 -o 0xfffff8a000024010 printkey -K &quot;ControlSet001\\Control\\ComputerName\\ComputerName&quot; WIN-LO6FAF3DTFE 1vol.py -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; --profile=Win7SP1x64 netscan 192.168.202.131 NSSCTF&#123;WIN-LO6FAF3DTFE-192.168.202.131&#125; Play Time# 分析一下进程 1vol.py -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; --profile=Win7SP1x64 pslist 提示是old videogames，找到一个进程LunarMS.exe应该是一个日本古老游戏露娜 LunarMS 1vol.py -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; --profile=Win7SP1x64 netscan 找到这个游戏对应的ip：77.102.199.102 NSSCTF&#123;LunarMS-77.102.199.102&#125; Silly Rick#提示：He always copy and paste the password so he will not get it wrong. 总是复制粘贴，所以看看他的剪贴板 1vol.py -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; --profile=Win7SP1x64 clipboard M@il_Pr0vid0rs NSSCTF&#123;M@il_Pr0vid0rs&#125; Name Game# 之前看到过了那个游戏的进程，dump下来 1vol.py -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; --profile=Win7SP1x64 memdump -p 708 -D &#x27;/home/kali/Desktop/Game&#x27; 使用linux内置字符串查找 1strings &#x27;/home/kali/Desktop/Game/708.dmp&#x27; | grep &quot;Lunar-3&quot; -C 20 string使用参数：-C&lt;显示行数&gt; 或 --context=&lt;显示行数&gt;或-&lt;显示行数&gt; : 除了显示符合样式的那一行之外，并显示该行之前后的内容。 在其之后找到了一个可疑的字符串：0tt3r8r33z3 NSSCTF&#123;0tt3r8r33z3&#125; Hide And Seek# 查看进程树 1vol.py -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; --profile=Win7SP1x64 pstree vmware-tray.exe是Rick And Morty的子进程，十分可疑 同时检测和分析内存中的恶意软件特征也可以找到这个文件 1vol.py -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; --profile=Win7SP1x64 malfind NSSCTF&#123;vmware-tray.exe&#125; Name Game 2# 使用游戏进程dump下来的文件 0x64 0x??&#123;6-8&#125; 0x40 0x06 0x??&#123;18&#125; 0x5a 0x0c 0x00&#123;2&#125;，只需要找5A 0C 00 00并且前面对应的地方 扔进010搜索 M0rtyL0L NSSCTF&#123;M0rtyL0L&#125; Path To Glory# 刚刚进行检测和分析内存中的恶意软件特征时也看见了这个文件 这是一个种子传输的程序，猜测古老获取病毒的方式是种子传输 找到这个恶意文件的父进程的下载路径 把这几个文件都dump下来看看 再寻找一下可疑信息 一个可疑的字符串：M3an_T0rren7_4_R!cke NSSCTF&#123;M3an_T0rren7_4_R!ck&#125; 注意！提交flag的时候没有最后面的e！ Bit 4 Bit# 把那个可疑进程dump出来 1vol.py -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; --profile=Win7SP1x64 pslist 1vol.py -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; --profile=Win7SP1x64 procdump -p 3720 -D &#x27;/home/kali/Desktop/Game&#x27; 看看文件成分 这个病毒是.NET写的 使用dnSpy打开 在隐藏资源的Form3找到了地址 1MmpEmebJkqXG8nQv4cjJSmxZQFVmFo63M NSSCTF&#123;1MmpEmebJkqXG8nQv4cjJSmxZQFVmFo63M&#125; Graphic’s For The Weak# 图片有点可疑，打开之前dump下来的文件 在里面发现了疑似png文件的格式 直接binwalk解了 CTF&#123;S0_Just_M0v3_Socy&#125; NSSCTF&#123;S0_Just_M0v3_Socy&#125; Path To Glory 2# 刚刚那个病毒是通过种子下载的，加之之前看到了很多chrome进程，所以从chrome记录入手 1vol.py -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; --profile=Win7SP1x64 filescan |grep -i &quot;chrome.*history*&quot; 把得到的信息dump下来 1vol.py -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; --profile=Win7SP1x64 dumpfiles -Q 0x000000007d45dcc0 -D &#x27;/home/kali/Desktop/Game&#x27; 这是一个数据库文件 种子是在mail.com里面下载的，所以过滤相关信息 1trings /home/kali/Desktop/OtterCTF.vmem &gt; /home/kali/Desktop/OtterCTF.vmem.strings 1grep &quot;@mail.com&quot; &#x27;/home/kali/Desktop/OtterCTF.vmem.strings&#x27; 这个看起来像是邮箱地址，附近应该还有东西，过滤的范围应该更大一些 1grep -A 20 &quot;&lt;rickopicko@mail.com&gt;&quot; &#x27;/home/kali/Desktop/OtterCTF.vmem.strings&#x27; 这就是flag*（这谁找得到啊）* Hum@n_I5_Th3_Weak3s7_Link_In_Th3_Ch@in NSSCTF&#123;Hum@n_I5_Th3_Weak3s7_Link_In_Th3_Ch@in&#125; Recovery# 找出密码是什么，依然用dnSpy打开勒索病毒查看伪代码 密码组成有一部分为“主机名”+“-”+“用户名”+“ ” 之前得到的主机名WIN-LO6FAF3DTFE 查看用户名 1vol.py -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; --profile=Win7SP1x64 hashdump Rick 得知密码一部分为 WIN-LO6FAF3DTFE-Rick 筛选 1strings -e l &#x27;/home/kali/Desktop/Game/3720.dmp&#x27; | grep &quot;WIN-LO6FAF3DTFE-Rick&quot; 密码为：WIN-LO6FAF3DTFE-Rick aDOBofVYUNVnmp7 NSSCTF&#123;aDOBofVYUNVnmp7&#125; Closure# 被加密的应该就是flag文件了，让我们找找看它在哪里 1vol.py -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; --profile=Win7SP1x64 filescan | grep -i &quot;flag&quot; 把它dump下来 1vol.py -f &#x27;/home/kali/Desktop/OtterCTF.vmem&#x27; --profile=Win7SP1x64 dumpfiles -Q 0x000000007e410890 --dump-dir=&#x27;/home/kali/Desktop/Game&#x27; 把它改个名字 网上找到这个勒索病毒Hidden Tear 在网上可以找到解密程序HiddenTearDecrypter 在解密之前，需要移除文件后所有的十六进制 00，并修改文件的后缀为 .locked，放入一个文件夹里面 解密得到了原文件 修改后缀名 得到了flag！ NSSCTF&#123;Im_Th@_B3S7_RicK_0f_Th3m_4ll&#125;"},{"title":"pearlCTF [Forensics]SoundScape WP by MiguoQAQ","path":"2024/03/10/pearlCTF [Forensics]SoundScape WP by MiguoQAQ/","text":"SoundScape# 第四个是我所在的队伍！我是第四个做出来的！耶！ 👇以下为WriteUp👇 给了三个音频，说音频就是图片，看看音频们 全都是这样的格式，肯定是高低对应10没错了，而且数量如此之多，猜测是文件的二进制值 但为什么有三个这样的文件呢？ 文件的名字经过搜索并没有什么特别的，但是大写的首字母是RGB，思路变得清晰起来了！ 接下来就是拿到数据和脚本运算了 打开010看看能不能从文件格式内得到信息 经过比较Audacity内的信息，发现wav文件并没有被压缩破坏，还是很有灵性的~导出16进制，把7F改成1，把00改成0就可以得到二进制了，其他两个文件同理。 把得到的0101……信息存储到txt文件里，命名为Raine1.txt 因为得到的01二进制数据有1769472位，每8位转换成一个2位的16进制数，所以得到的数据对应的有221184个，分离因数可以猜出图片大小 接下来就是写脚本环节！ 12345678910111213141516171819202122232425262728293031323334353637383940414243import numpy as npimport matplotlib.pyplot as pltdef convert_binary_to_hex(binary_string): decimal_value = int(binary_string, 2) hex_string = format(decimal_value, &#x27;02X&#x27;) return hex_stringdef main(): with open(&#x27;Raine1.txt&#x27;, &#x27;r&#x27;) as file1, open(&#x27;Gideon1.txt&#x27;, &#x27;r&#x27;) as file2, open(&#x27;Beryl1.txt&#x27;, &#x27;r&#x27;) as file3: binary1 = file1.read() binary2 = file2.read() binary3 = file3.read() hex_colors = [] for i in range(0, len(binary1), 8): r = convert_binary_to_hex(binary1[i:i+8]) g = convert_binary_to_hex(binary2[i:i+8]) b = convert_binary_to_hex(binary3[i:i+8]) hex_colors.append((r+g+b)) #print(hex_colors) #这里可以打印出来一些RGB像素数据来判断进制转换是否正确 # 将16进制颜色转换为RGB格式 rgb_colors = [tuple(int(hex[i:i + 2], 16) for i in (0, 2, 4)) for hex in hex_colors] # 创建一个数组以存储像素值 image_array = np.array([rgb_colors], dtype=np.uint8) # 调整数组形状以匹配图像尺寸 #这里我发现的图片尺寸是384*576 image_array = image_array.reshape(384, 576, 3) # 绘制图像 plt.imshow(image_array) plt.axis(&#x27;off&#x27;) # 保存图像为文件 plt.savefig(&#x27;output_image.png&#x27;)if __name__ == &quot;__main__&quot;: main() 运行一下，就可以得到图片力"},{"title":"Forensics 学习 No.1","path":"2024/02/06/No-1/","text":"Forensics学习No.1-内存取证工具volatility# volatility安装，环境配置及其插件安装 volatility安装 volatility插件安装 官方帮助 命令格式 常用命令- 查看镜像文件系统摘要信息： 用户相关 查看用户名和密码（hash值） 从注册表中查看密码： 使用mimikatz插件查看密码（需要进入插件目录） cmd相关 查看cmd使用情况 查看cmd详细情况 抓取控制台下执行的命令以及回显数据 进程相关 扫描内存中的进程 列举全部进程 查看进程结构图 查看隐藏进程 找出隐藏在内存中的dll文件和代码 列出每个进程已加载的dll 将进程程序提取出来 显示内存中多种事件的时间线 显示进程的环境变量 显示进程的运行权限 导出当前进程的可执行文件 最大程序提取信息 程序版本信息 通过yarascan来定义YARA规则进行搜索 文件相关 扫描文件 提取文件 抓取删除的文件 扫描内存中潜在的主引导记录 扫描在内存中潜在NTFS主文件表记录(MFT) 检测和分析内存中的恶意软件特征 从内存文件中找到异常程序植入到系统的开机自启痕迹 注册表相关 打印 userassist 注册表项和信息，查看运行程序相关记录 查看注册表蜂巢文件，显示内存中的注册表配置单元和对应的路径 可以对蜂巢根目录进行dump，查看注册表键名子项 查看注册表键值 导出shellbags注册表项 将内存中的注册表配置单元导出至磁盘 网络相关 扫描全部网络连接 检索已建立的网络连接状态，显示活跃的TCP连接（&#x2F;win7sp1x64不可用） 查看网络连接状态，显示所有的TCP连接（&#x2F;win7sp1x64不可用） 显示所有的套接字连接（&#x2F;win7sp1x64不可用） 扫描标签池查找_ADDRESS_OBJECT结构体（&#x2F;win7sp1x64不可用） windows系统相关 查看桌面截图并存储（只有线框图和标题） 查看notepad文件（只能查看进程中的notepad.exe中的内容） 查看内存中Windows剪切板中的内容 打印系统所有桌面窗口的信息 以树状形式打印系统所有的窗口简略信息 查看编辑控件信息 查看ie浏览器历史浏览记录 扫描windows的服务 查看环境变量 内存映像交互访问命令行工具 linux相关 查看linux_bash命令 分析Linux系统中的进程和进程环境 查看linux系统的dmesg缓冲区中日志消息 检查Linux系统调用表是否被修改过 volatility安装，环境配置及其插件安装#volatility安装#1234参考文档：https://cloud.tencent.com/developer/article/2375403https://blog.csdn.net/weixin_44895005/article/details/123917324https://bbs.huaweicloud.com/blogs/399904 配置环境：kali linux2023 python环境：python2 安装源码：https://github.com/volatilityfoundation/volatility 针对python2 在安装之前，需要配置下本地的pip2环境，因为在kali2023里面，pip和pip3都是python3的，并没有给python2配置pip，所以需要自己单独安装下，不然后面配置的环境都跑到python3里面去了。 所以在这里单独配置pip2： 1curl https://bootstrap.pypa.io/pip/2.7/get-pip.py -o get-pip.py 1sudo python2 get-pip.py 安装完之后，使用pip2看下当前的版本信息： 然后准备安装volatility：去下载https://github.com/volatilityfoundation/volatility，然后进入volatility目录内直接安装： 1python2 setup.py install 继续安装必须的模块： crypto模块 1pip2 install pycryptodome -i https://pypi.tuna.tsinghua.edu.cn/simple 如果出现类似报错：Command errored out with exit status 1: python setup.py egg_info Check the logs for full command ， 那么需要升级一下pip2 1pip2 install --upgrade setuptools 然后再次进行安装即可。 distorm3模块 依赖： 1pip2 install pycryptodome 在这里需要先将模块下载下来：https://github.com/vext01/distorm3 将模块存入volatility目录内，然后进入distorm3目录内使用命令行安装： 1python2 setup.py install construct库 1pip2 install construct 此时基础的模块就算安装好了，可以在任意目录下输入vol.py 如果出现这个，就说明安装好了 volatility插件安装# 安装mimikatz插件 https://raw.githubusercontent.com/RealityNet/hotoloti/master/volatility/mimikatz.py 需要将这个文件移动到python2的volatility的插件目录下： 1234cd /usr/lib/python2.7/dist-packagesmkdir volatilitycd volatilitymkdir plugins 然后将这个文件复制过去： 1cp mimikatz.py /usr/lib/python2.7/dist-packages/volatility/plugins/ 最后对于文件赋予权限： 1chmod 777 * 现在可以尝试一下了，这里需要注意一下，一定要在保存的目录内使用--plugin=./参数调用插件（在其他地方调用会出现找不到插件的错误） 1vol.py --plugin=./ -f &#x27;/home/kali/Desktop/学取证咯.raw&#x27; --profile=Win7SP1x64 mimikatz 安装yara插件 一定要通过手动下载然后转移到kali内！！不要使用pip，apt-get等方式获取！ 下载yara：https://virustotal.github.io/yara/（下载4.2.3版本） 下载yara-python：https://github.com/VirusTotal/yara-python（下载4.2.3版本） （本人实验只有对应的4.2.3版本可以正常运行，版本过高会有不兼容问题，具体错误报告见https://github.com/volatilityfoundation/volatility/issues/869） 123参考文章（官方文档）：https://yara.readthedocs.io/en/v4.2.3/gettingstarted.htmlhttps://github.com/VirusTotal/yara-python/blob/master/README.rst 本文只摘取官方文档中部分基础内容，建议阅读官方文档进行安装 安装yara所需的模块&#x2F;库 123sudo apt-get install automake libtool make gcc pkg-configsudo apt-get install libjansson-devsudo apt install libmagic-dev 下载yara4.2.3压缩包后按照标准方式编译并安装YARA： 123456tar -zxf yara-4.2.3.tar.gzcd yara-4.2.3./bootstrap.sh./configuremakesudo make install 运行测试用例以确保一切正常： 1make check 这时可以通过运行 1yara --version 来测试yara 编译yara-python-4.2.3（解压缩到yara-4.2.3目录内，在yara-4.2.3目录内安装） 123tar -zxf yara-python-4.2.3.tar.gzcd yara-python-4.2.3python2 setup.py build 此时将yara-4.2.3文件夹内文件拷贝一份，复制到yara-python-4.2.3文件夹内的yara文件夹中，去除yara-python-4.2.3文件夹 这个时候安装yara-python-4.2.3 1sudo python2 setup.py install 如果您想动态链接共享libyara库，请使用： 1python2 setup.py build --dynamic-linking 这时可以使用 123python2import yaraprint(yara.__version__) 来测试yara-python 最后尝试使用volatility中的yarascan 1vol.py -f &#x27;/home/kali/Desktop/学取证咯.raw&#x27; --profile=Win7SP1x64 yarascan -p 2304,2392 -Y &quot;/(URL|REDR|LEAK)/&quot; 能扫出结果就说明yara以及yarapython安装成功 PyCrypto（加密工具集）： 1pip2 install pycrypto PIL（图片处理库）： 1pip2 install Pillow OpenPyxl（读写excel文件）： 1pip2 install openpyxl ujson（JSON解析）： 1pip2 install ujson 官方帮助#输入vol.py --h 查看官方做出的帮助 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159Volatility Foundation Volatility Framework 2.6.1Usage: Volatility - A memory forensics analysis platform.Options: -h, --help list all available options and their default values. Default values may be set in the configuration file (/etc/volatilityrc) --conf-file=/root/.volatilityrc User based configuration file -d, --debug Debug volatility --plugins=PLUGINS Additional plugin directories to use (colon separated) --info Print information about all registered objects --cache-directory=/root/.cache/volatility Directory where cache files are stored --cache Use caching --tz=TZ Sets the (Olson) timezone for displaying timestamps using pytz (if installed) or tzset -f FILENAME, --filename=FILENAME Filename to use when opening an image --profile=WinXPSP2x86 Name of the profile to load (use --info to see a list of supported profiles) -l LOCATION, --location=LOCATION A URN location from which to load an address space -w, --write Enable write support --dtb=DTB DTB Address --shift=SHIFT Mac KASLR shift address --output=text Output in this format (support is module specific, see the Module Output Options below) --output-file=OUTPUT_FILE Write output in this file -v, --verbose Verbose information --physical_shift=PHYSICAL_SHIFT Linux kernel physical shift address --virtual_shift=VIRTUAL_SHIFT Linux kernel virtual shift address -g KDBG, --kdbg=KDBG Specify a KDBG virtual address (Note: for 64-bit Windows 8 and above this is the address of KdCopyDataBlock) --force Force utilization of suspect profile --cookie=COOKIE Specify the address of nt!ObHeaderCookie (valid for Windows 10 only) -k KPCR, --kpcr=KPCR Specify a specific KPCR address Supported Plugin Commands: amcache Print AmCache information apihooks Detect API hooks in process and kernel memory atoms Print session and window station atom tables atomscan Pool scanner for atom tables auditpol Prints out the Audit Policies from HKLM\\SECURITY\\Policy\\PolAdtEv bigpools Dump the big page pools using BigPagePoolScanner bioskbd Reads the keyboard buffer from Real Mode memory cachedump Dumps cached domain hashes from memory callbacks Print system-wide notification routines clipboard Extract the contents of the windows clipboard cmdline Display process command-line arguments cmdscan Extract command history by scanning for _COMMAND_HISTORY connections Print list of open connections [Windows XP and 2003 Only] connscan Pool scanner for tcp connections consoles Extract command history by scanning for _CONSOLE_INFORMATION crashinfo Dump crash-dump information deskscan Poolscaner for tagDESKTOP (desktops) devicetree Show device tree dlldump Dump DLLs from a process address space dlllist Print list of loaded dlls for each process driverirp Driver IRP hook detection drivermodule Associate driver objects to kernel modules driverscan Pool scanner for driver objects dumpcerts Dump RSA private and public SSL keys dumpfiles Extract memory mapped and cached files dumpregistry Dumps registry files out to disk editbox Displays information about Edit controls. (Listbox experimental.) envars Display process environment variables eventhooks Print details on windows event hooks evtlogs Extract Windows Event Logs (XP/2003 only) filescan Pool scanner for file objects gahti Dump the USER handle type information gditimers Print installed GDI timers and callbacks gdt Display Global Descriptor Table getservicesids Get the names of services in the Registry and return Calculated SID getsids Print the SIDs owning each process handles Print list of open handles for each process hashdump Dumps passwords hashes (LM/NTLM) from memory hibinfo Dump hibernation file information hivedump Prints out a hive hivelist Print list of registry hives. hivescan Pool scanner for registry hives hpakextract Extract physical memory from an HPAK file hpakinfo Info on an HPAK file idt Display Interrupt Descriptor Table iehistory Reconstruct Internet Explorer cache / history imagecopy Copies a physical address space out as a raw DD image imageinfo Identify information for the image impscan Scan for calls to imported functions joblinks Print process job link information kdbgscan Search for and dump potential KDBG values kpcrscan Search for and dump potential KPCR values ldrmodules Detect unlinked DLLs lsadump Dump (decrypted) LSA secrets from the registry machoinfo Dump Mach-O file format information malfind Find hidden and injected code mbrparser Scans for and parses potential Master Boot Records (MBRs) memdump Dump the addressable memory for a process memmap Print the memory map messagehooks List desktop and thread window message hooks mftparser Scans for and parses potential MFT entries moddump Dump a kernel driver to an executable file sample modscan Pool scanner for kernel modules modules Print list of loaded modules multiscan Scan for various objects at once mutantscan Pool scanner for mutex objects notepad List currently displayed notepad text objtypescan Scan for Windows object type objects patcher Patches memory based on page scans poolpeek Configurable pool scanner plugin printkey Print a registry key, and its subkeys and values privs Display process privileges procdump Dump a process to an executable file sample pslist Print all running processes by following the EPROCESS lists psscan Pool scanner for process objects pstree Print process list as a tree psxview Find hidden processes with various process listings qemuinfo Dump Qemu information raw2dmp Converts a physical memory sample to a windbg crash dump screenshot Save a pseudo-screenshot based on GDI windows servicediff List Windows services (ala Plugx) sessions List details on _MM_SESSION_SPACE (user logon sessions) shellbags Prints ShellBags info shimcache Parses the Application Compatibility Shim Cache registry key shutdowntime Print ShutdownTime of machine from registry sockets Print list of open sockets sockscan Pool scanner for tcp socket objects ssdt Display SSDT entries strings Match physical offsets to virtual addresses (may take a while, VERY verbose) svcscan Scan for Windows services symlinkscan Pool scanner for symlink objects thrdscan Pool scanner for thread objects threads Investigate _ETHREAD and _KTHREADs timeliner Creates a timeline from various artifacts in memory timers Print kernel timers and associated module DPCs truecryptmaster Recover TrueCrypt 7.1a Master Keys truecryptpassphrase TrueCrypt Cached Passphrase Finder truecryptsummary TrueCrypt Summary unloadedmodules Print list of unloaded modules userassist Print userassist registry keys and information userhandles Dump the USER handle tables vaddump Dumps out the vad sections to a file vadinfo Dump the VAD info vadtree Walk the VAD tree and display in tree format vadwalk Walk the VAD tree vboxinfo Dump virtualbox information verinfo Prints out the version information from PE images vmwareinfo Dump VMware VMSS/VMSN information volshell Shell in the memory image windows Print Desktop Windows (verbose details) wintree Print Z-Order Desktop Windows Tree wndscan Pool scanner for window stations yarascan Scan process or kernel memory with Yara signatures 命令格式#1234567891011volatility -f [image] --profile=[profile] [plugin]volatility -f [对象] --profile=[操作系统] [插件参数]在分析之前，需要先判断当前的镜像信息，分析出是哪个操作系统 命令imageinfo即可获取镜像信息。 Volatility -f xxx.vmem imageinfo在查到操作系统后如果不确定可以使用以下命令查看volatility - f xxx.vmem --profile= [操作系统] volshell 常用命令#12345678910111213123.raw为镜像文件，test.xxx为外部保存文件，文件路径均默认使用/home/kali/Desktop/，Win7SP1x64为系统版本，0xffff111111为虚拟内存地址，0x0000111111为物理内存地址&#x27;/home/kali/Desktop/exes&#x27;是生成文件存放目录 查看镜像文件系统摘要信息：#1volatility -f home/kali/Desktop/123.raw imageinfo 筛选： | greb abc 用户相关#查看用户名和密码（hash值）#1volatility -f home/kali/Desktop/123.raw --profile=Win7SP1x64 hashdump 从注册表中查看密码：#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 lsadump 使用mimikatz插件查看密码（需要进入插件目录）#1vol.py --plugin=./ -f home/kali/Desktop/123.raw --profile=Win7SP1x64 mimikatz cmd相关#查看cmd使用情况#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 cmdscan 查看cmd详细情况#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 cmdline 抓取控制台下执行的命令以及回显数据#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 consoles 进程相关#扫描内存中的进程#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 psscan 列举全部进程#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 pslist 查看进程结构图#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 pstree 查看隐藏进程#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 psxview 找出隐藏在内存中的dll文件和代码#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 malfind 列出每个进程已加载的dll#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 dlllist -n 111.exe 其中111.exe为进程名 将进程程序提取出来#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 memdump -p 1111 -D &#x27;/home/kali/Desktop/exes&#x27; 其中1111,2222为进程pid 显示内存中多种事件的时间线#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 timeliner 显示进程的环境变量#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 envar 显示进程的运行权限#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 privs 导出当前进程的可执行文件#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 procdump -p 1111 -D &#x27;/home/kali/Desktop/exes&#x27; 其中1111,2222为进程pid 最大程序提取信息#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 timeliner 程序版本信息#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 verinfo 通过yarascan来定义YARA规则进行搜索#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 yarascan -p 1111,2222 -Y &quot;/(URL|REDR|LEAK)/&quot; 其中1111,2222为进程pid，&quot;/(URL|REDR|LEAK)/&quot;为yarascan自定义规则 文件相关#扫描文件#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 filescan 提取文件#12345678vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 dumpfiles -Q 0x0000111111 --dump-dir=&#x27;/home/kali/Desktop/exes&#x27;-n, --name #在转储出来的文件的文件名中加入原来的文件名-u, --unsafe #放松安全约束来获取更多信息-r, --regex #转储符合正则表达式的文件-i, --ignore-case #在正则表达式中忽略大小写导出的文件名有三种后缀.img .dat .vacb其中.dat文件可以直接修改后缀为原文件后缀使用 抓取删除的文件#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 mftparser 扫描内存中潜在的主引导记录#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 mbrparser 扫描在内存中潜在NTFS主文件表记录(MFT)#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 mftparser 就算删除了文件，在MFT中这条记录会被标记为free，但是实际文件是仍然没有被真正删除的，只要原来的文件没有被新文件覆盖，就可以完整恢复被删除的文件。在mftparser的$DATA就可以看见文件的数据了 检测和分析内存中的恶意软件特征#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 malfind 从内存文件中找到异常程序植入到系统的开机自启痕迹#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64shimcache 注册表相关#打印 userassist 注册表项和信息，查看运行程序相关记录#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 userassist 查看注册表蜂巢文件，显示内存中的注册表配置单元和对应的路径#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 hivelist 可以对蜂巢根目录进行dump，查看注册表键名子项#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 -o 0xffff111111 hivedump 导出的注册表的后缀为.reg，但是不能直接挂载，可以用WRR转换成Windows可以挂载的格式或直接阅读 查看注册表键值#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 -o 0xffff111111 printkey -K &quot;ControlSet001\\Control&quot; &quot;ControlSet001\\Control&quot;是注册表子项 通常主机名位置：ControlSet001\\Control\\ComputerName\\ComputerName 通常用户名位置：SAM\\Domains\\Account\\Ueers\\Names 导出shellbags注册表项#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 shellbags 关于shellbags注册表项：是一组用来记录文件夹（包括挂载网络驱动器文件夹和挂载设备的文件夹）的名称、大小、图标、视图、位置的注册表项。每次对文件夹的操作，shellBags的信息都会更新，而且包含时间戳信息。是Windows系统改善用户体验的功能之一。即使删除文件夹后，shellBags仍然会保留文件夹的信息 将内存中的注册表配置单元导出至磁盘#12vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 dumpregistry -D &#x27;/home/kali/Desktop/exes&#x27; #导出所有注册表到磁盘vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 dumpregistry -o 0xffff111111 -D &#x27;/home/kali/Desktop/exes&#x27; #导出对应虚拟偏移所在的单个注册表 网络相关#扫描全部网络连接#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 netscan 检索已建立的网络连接状态，显示活跃的TCP连接（&#x2F;win7sp1x64不可用）#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x86 connections 查看网络连接状态，显示所有的TCP连接（&#x2F;win7sp1x64不可用）#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x86 connscan 显示所有的套接字连接（&#x2F;win7sp1x64不可用）#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x86 sockets 扫描标签池查找_ADDRESS_OBJECT结构体（&#x2F;win7sp1x64不可用）#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x86 sockscan windows系统相关#查看桌面截图并存储（只有线框图和标题）#1&#x27;/home/kali/Desktop/exes&#x27;vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 screenshot --dump-dir=&#x27;/home/kali/Desktop/exes&#x27; 查看notepad文件（只能查看进程中的notepad.exe中的内容）#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 notepad 查看内存中Windows剪切板中的内容#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 clipboard 打印系统所有桌面窗口的信息#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 windows 以树状形式打印系统所有的窗口简略信息#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 wintree 查看编辑控件信息#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 editbox 查看ie浏览器历史浏览记录#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 iehistory 扫描windows的服务#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 svcscan 查看环境变量#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 envars 内存映像交互访问命令行工具#1vol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64vvol.py -f home/kali/Desktop/123.raw --profile=Win7SP1x64 volshell linux相关#查看linux_bash命令#1vol.py -f dump.mem --profile=LinuxCentos7_3_10_1062x64 linux_bash 分析Linux系统中的进程和进程环境#1vol.py -f dump.mem --profile=LinuxCentos7_3_10_1062x64 linux_psaux 查看linux系统的dmesg缓冲区中日志消息#1vol.py -f dump.mem --profile=LinuxCentos7_3_10_1062x64 linux_dmesg 检查Linux系统调用表是否被修改过#1vol.py -f dump.mem --profile=LinuxCentos7_3_10_1062x64 linux_check_syscall | grep HOOKED"},{"title":"uh,hi?","path":"2024/01/23/uh-hi/","text":"meao？"}]